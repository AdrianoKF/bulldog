ext {
	bulldogVersion = '0.1.0'
	distributionDirectory = new File('../dist', 'Version-' + bulldogVersion);
}

def boardDistributionDirectory(String boardName) {
	return new File(distributionDirectory, boardName)
}

def javaProjects = [
					project(":bulldog.core"), 
					project(":bulldog.devices"), 
					project(":bulldog.examples"), 
					project(":bulldog.linux"),
				   ]
				   
def boardProjects = [
					 project(":bulldog.board.beagleboneblack"),
					 project(":bulldog.board.raspberrypi")
					]

def nativeProjects = [
					  project(":bulldog.linux.native")
					 ]
					 
def allJavaProjects = new LinkedList(javaProjects);
allJavaProjects.addAll(boardProjects)
		
if(hasProperty('board')) {
	boardProjects = boardProjects.findAll { it.path.contains(board) };
} 

configure(nativeProjects) {
	apply from: new File(project.projectDir, 'build.gradle')
	version = bulldogVersion
}
					 
configure(allJavaProjects) { 
   	   
    apply plugin: 'java'
    apply plugin: 'eclipse'
   	
    version = bulldogVersion
 
    repositories {
       mavenCentral()
    }
 
    dependencies {
    	testCompile 'junit:junit:4.8.2'
    }
 
    jar {
        manifest.attributes 'Implementation-Version': version
        manifest.attributes provider: 'Datenheld'
        from ("${projectDir}/src/main/java/") {
        	include('*/**')
    	}
    }
    
    task sourcesJar(type: Jar, dependsOn:classes) { 
       classifier = 'sources' 
       from sourceSets.main.allSource 
	} 

	task javadocJar(type: Jar, dependsOn:javadoc) { 
	     classifier = 'javadoc' 
	     from javadoc.destinationDir 
	} 
	
	artifacts { 
	     archives sourcesJar 
	     archives javadocJar 
	} 
    
    uploadArchives {
    	repositories {
	    	 flatDir {
	        	dirs 'bulldog.repository'
	    	}
    	}
    }	
}


boardProjects.each { def boardProject -> 
	evaluationDependsOn(boardProject.path) 
    tasks.create(name: "singleJar$boardProject.name", type: Jar) { 
        baseName = boardProject.distributionBaseName
        destinationDir = boardDistributionDirectory(boardProject.distributionBaseName)
        
        manifest { 
     		attributes 'Main-Class': 'org.bulldog.examples.PinIOGroupExample' 
     	}
    
    	javaProjects.each { javaProject -> 
    		evaluationDependsOn(javaProject.path) 
    		from zipTree(javaProject.jar.archivePath) 
		}	
		
		from zipTree(boardProject.jar.archivePath)
    } 
} 

task singleJarSources(type: Copy) {
    baseName = "sources"
    destinationDir = new File(distributionDirectory, 'sources')
    
	allJavaProjects.each { javaProject -> 
		evaluationDependsOn(javaProject.path) 
		from zipTree(javaProject.sourcesJar.archivePath) 
	}	
}

boardProjects.each { def boardProject -> 
	evaluationDependsOn(boardProject.path)
	evaluationDependsOn(project(':bulldog.linux.native').path)
    tasks.create(name: "distribute$boardProject.name", type: Copy, dependsOn: [ project(':bulldog.linux.native').tasks.matching  { Task task -> task.name.contains('BulldogSharedLibrary') } ]) { 
       //delete project.distributionDirectory
       destinationDir = boardDistributionDirectory(boardProject.distributionBaseName)
       destinationDir.mkdirs()
       FileCollection collection = boardProject.distributionFiles
       from collection
       into destinationDir
    }     
} 

boardProjects.each { def boardProject -> 
	evaluationDependsOn(boardProject.path)
    tasks.create(name: "createZipArchive$boardProject.name", type: Zip) { 
       baseName = boardProject.distributionBaseName + '-' + bulldogVersion
       destinationDir = boardDistributionDirectory(boardProject.distributionBaseName)
       excludes = [ '*.zip', '*sources.*' ]
       from boardDistributionDirectory(boardProject.distributionBaseName)
    } 
} 

boardProjects.each { def boardProject -> 
	evaluationDependsOn(boardProject.path)
    tasks.create(name: "createZipArchiveWithSources$boardProject.name", type: Zip) { 
       baseName = boardProject.distributionBaseName + 'WithSources-' + bulldogVersion
       destinationDir = boardDistributionDirectory(boardProject.distributionBaseName)
       excludes = [ '*.zip' ]
       from boardDistributionDirectory(boardProject.distributionBaseName)
    } 
} 

task docs(type: Javadoc) {
    source allJavaProjects.collect {project -> project.sourceSets.main.allJava } 
    classpath = files(allJavaProjects.collect {project -> project.sourceSets.main.compileClasspath}) 
    destinationDir = new File(distributionDirectory, 'javadoc')
}

task packageBoardArtifacts(dependsOn: [ tasks.matching { Task task -> task.name.startsWith("singleJar")}, subprojects.assemble]) 
task distribution(dependsOn: [ tasks.matching { Task task -> task.name.startsWith("distribute")}, packageBoardArtifacts])
task archiveDistributions(dependsOn: [ tasks.matching { Task task -> task.name.startsWith("createZipArchive")}, distribution])







